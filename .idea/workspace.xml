<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="d6cbe158-3b9f-4272-85f5-7e71c61681e9" name="Changes" comment="07 Add remaining tests for Futures and Streams to complete Product repository test except for providers as they do not have business logic">
      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/ecommerce_app/lib/src/features/products/data/fake_products_repository.dart" beforeDir="false" afterPath="$PROJECT_DIR$/ecommerce_app/lib/src/features/products/data/fake_products_repository.dart" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/ecommerce_app/test/src/features/products/data/fake_products_repository_test.dart" beforeDir="false" afterPath="$PROJECT_DIR$/ecommerce_app/test/src/features/products/data/fake_products_repository_test.dart" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ClangdSettings">
    <option name="formatViaClangd" value="false" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="section06-starter" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GithubPullRequestsUISettings"><![CDATA[{
  "selectedUrlAndAccountId": {
    "url": "https://github.com/Mlungisi93/e-commerce_app.git",
    "accountId": "aee8684e-0413-4f42-a7c8-0d65b8d2c775"
  }
}]]></component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "dart.analysis.tool.window.visible": "false",
    "git-widget-placeholder": "section06-finished__mlue"
  }
}]]></component>
  <component name="TaskManager">
    <task id="LOCAL-00001" summary="Section 6 Starter project">
      <option name="closed" value="true" />
      <created>1725425741581</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1725425741581</updated>
    </task>
    <task id="LOCAL-00002" summary="06: Add first test + product equality methods">
      <option name="closed" value="true" />
      <created>1725427290148</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1725427290148</updated>
    </task>
    <task id="LOCAL-00003" summary="05: Add getProduct teststest('getProduct(100) returns null', () {&#10;        final productsRepository = FakeProductsRepository();&#10;        expect(&#10;          productsRepository.getProduct('100'),&#10;          null,&#10;        );&#10;      }); fix &#10;      Test matchers and working with methods that throw exceptions&#10;      The expect method can be used directly to compare values.&#10;      &#10;      But we can also use custom test matchers, such as throwsStateError in this example:&#10;      &#10;      test('getProduct(100) returns null', () {&#10;        final productsRepository = FakeProductsRepository();&#10;        expect(&#10;          () =&gt; productsRepository.getProduct('100'),&#10;          throwsStateError,&#10;        );&#10;      });&#10;      Testing functions that throw&#10;      Note that if a function throws, we should wrap it inside a closure, or use a method tear-off when possible, as described here:">
      <option name="closed" value="true" />
      <created>1725429268871</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1725429268871</updated>
    </task>
    <task id="LOCAL-00004" summary="06: Implement private _getProduct method + update test&#10;Fixing the getProduct() method and updating the unit tests&#10;Grouping&#10;If we have multiple tests that belong together, we can put them inside a group:&#10;&#10;void main() {&#10;  FakeProductsRepository makeProductsRepository() =&gt; FakeProductsRepository(&#10;        addDelay: false,&#10;      );&#10;  group('FakeProductsRepository', () {&#10;    test('getProductsList returns global list', () {&#10;      final productsRepository = makeProductsRepository();&#10;      expect(&#10;        productsRepository.getProductsList(),&#10;        kTestProducts,&#10;      );&#10;    });&#10; &#10;    test('getProduct(1) returns first item', () {&#10;      final productsRepository = makeProductsRepository();&#10;      expect(&#10;        productsRepository.getProduct('1'),&#10;        kTestProducts[0],&#10;      );&#10;    });&#10; &#10;    test('getProduct(100) returns null', () {&#10;      final productsRepository = makeProductsRepository();&#10;      expect(&#10;        productsRepository.getProduct('100'),&#10;        null,&#10;      );&#10;    });&#10;  });&#10;}&#10;Refactoring with confidence&#10;One great benefit of having tests is that they allow us to refactor with confidence.&#10;&#10;For example, we may have a getProduct method that is implemented like this:&#10;&#10;class FakeProductsRepository {&#10;  final List&lt;Product&gt; _products = kTestProducts;&#10; &#10;  Product? getProduct(String id) {&#10;    try {&#10;      return _products.firstWhere((product) =&gt; product.id == id);&#10;    } catch (e) {&#10;      return null;&#10;    }&#10;  }&#10;}&#10;Along with two tests to check its behavior:&#10;&#10;test('getProduct(1) returns first item', () {&#10;  final productsRepository = makeProductsRepository();&#10;  expect(&#10;    productsRepository.getProduct('1'),&#10;    kTestProducts[0],&#10;  );&#10;});&#10; &#10;test('getProduct(100) returns null', () {&#10;  final productsRepository = makeProductsRepository();&#10;  expect(&#10;    productsRepository.getProduct('100'),&#10;    null,&#10;  );&#10;});&#10;These tests give us a safety net, meaning that we can refactor our code and check if they still pass. Example:&#10;&#10;class FakeProductsRepository {&#10;  final List&lt;Product&gt; _products = kTestProducts;&#10; &#10;  // method under test&#10;  Product? getProduct(String id) {&#10;    return _getProduct(_products, id);&#10;  }&#10;  // private internal method that is also used elsewhere in this class&#10;  static Product? _getProduct(List&lt;Product&gt; products, String id) {&#10;    try {&#10;      return products.firstWhere((product) =&gt; product.id == id);&#10;    } catch (e) {&#10;      return null;&#10;    }&#10;  }  &#10;}&#10;In this case, we have moved some of the implementation logic into a private method that can be reused inside the class.">
      <option name="closed" value="true" />
      <created>1725430864284</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1725430864284</updated>
    </task>
    <task id="LOCAL-00005" summary="07 Add remaining tests for Futures and Streams to complete Product repository test except for providers as they do not have business logic">
      <option name="closed" value="true" />
      <created>1725432606987</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1725432606987</updated>
    </task>
    <option name="localTasksCounter" value="6" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Section 6 Starter project" />
    <MESSAGE value="06: Add first test + product equality methods" />
    <MESSAGE value="05: Add getProduct teststest('getProduct(100) returns null', () {&#10;        final productsRepository = FakeProductsRepository();&#10;        expect(&#10;          productsRepository.getProduct('100'),&#10;          null,&#10;        );&#10;      }); fix &#10;      Test matchers and working with methods that throw exceptions&#10;      The expect method can be used directly to compare values.&#10;      &#10;      But we can also use custom test matchers, such as throwsStateError in this example:&#10;      &#10;      test('getProduct(100) returns null', () {&#10;        final productsRepository = FakeProductsRepository();&#10;        expect(&#10;          () =&gt; productsRepository.getProduct('100'),&#10;          throwsStateError,&#10;        );&#10;      });&#10;      Testing functions that throw&#10;      Note that if a function throws, we should wrap it inside a closure, or use a method tear-off when possible, as described here:" />
    <MESSAGE value="06: Implement private _getProduct method + update test&#10;Fixing the getProduct() method and updating the unit tests&#10;Grouping&#10;If we have multiple tests that belong together, we can put them inside a group:&#10;&#10;void main() {&#10;  FakeProductsRepository makeProductsRepository() =&gt; FakeProductsRepository(&#10;        addDelay: false,&#10;      );&#10;  group('FakeProductsRepository', () {&#10;    test('getProductsList returns global list', () {&#10;      final productsRepository = makeProductsRepository();&#10;      expect(&#10;        productsRepository.getProductsList(),&#10;        kTestProducts,&#10;      );&#10;    });&#10; &#10;    test('getProduct(1) returns first item', () {&#10;      final productsRepository = makeProductsRepository();&#10;      expect(&#10;        productsRepository.getProduct('1'),&#10;        kTestProducts[0],&#10;      );&#10;    });&#10; &#10;    test('getProduct(100) returns null', () {&#10;      final productsRepository = makeProductsRepository();&#10;      expect(&#10;        productsRepository.getProduct('100'),&#10;        null,&#10;      );&#10;    });&#10;  });&#10;}&#10;Refactoring with confidence&#10;One great benefit of having tests is that they allow us to refactor with confidence.&#10;&#10;For example, we may have a getProduct method that is implemented like this:&#10;&#10;class FakeProductsRepository {&#10;  final List&lt;Product&gt; _products = kTestProducts;&#10; &#10;  Product? getProduct(String id) {&#10;    try {&#10;      return _products.firstWhere((product) =&gt; product.id == id);&#10;    } catch (e) {&#10;      return null;&#10;    }&#10;  }&#10;}&#10;Along with two tests to check its behavior:&#10;&#10;test('getProduct(1) returns first item', () {&#10;  final productsRepository = makeProductsRepository();&#10;  expect(&#10;    productsRepository.getProduct('1'),&#10;    kTestProducts[0],&#10;  );&#10;});&#10; &#10;test('getProduct(100) returns null', () {&#10;  final productsRepository = makeProductsRepository();&#10;  expect(&#10;    productsRepository.getProduct('100'),&#10;    null,&#10;  );&#10;});&#10;These tests give us a safety net, meaning that we can refactor our code and check if they still pass. Example:&#10;&#10;class FakeProductsRepository {&#10;  final List&lt;Product&gt; _products = kTestProducts;&#10; &#10;  // method under test&#10;  Product? getProduct(String id) {&#10;    return _getProduct(_products, id);&#10;  }&#10;  // private internal method that is also used elsewhere in this class&#10;  static Product? _getProduct(List&lt;Product&gt; products, String id) {&#10;    try {&#10;      return products.firstWhere((product) =&gt; product.id == id);&#10;    } catch (e) {&#10;      return null;&#10;    }&#10;  }  &#10;}&#10;In this case, we have moved some of the implementation logic into a private method that can be reused inside the class." />
    <MESSAGE value="07 Add remaining tests for Futures and Streams to complete Product repository test except for providers as they do not have business logic" />
    <option name="LAST_COMMIT_MESSAGE" value="07 Add remaining tests for Futures and Streams to complete Product repository test except for providers as they do not have business logic" />
  </component>
</project>